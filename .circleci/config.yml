version: 2.1
machine: true
commands:
  setup:
    description: "Install tools and configure kubectl"
    steps:
      - aws-cli/install
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.2.4
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://api.${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
            kubectl -n "${KUBE_ENV_NAMESPACE}" get pods
  deploy_to_env:
    parameters:
      env:
        type: string
    steps:
      - setup
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            APP_VERSION=$(cat ~/app/app_version.txt)
            helm upgrade court-case-matcher ~/git/helm_deploy/court-case-matcher/. \
              --install --wait --reset-values --timeout 360s \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --description="${APP_VERSION} - ${CIRCLE_BUILD_URL}" \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --set image.tag="${APP_VERSION}"
executors:
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:
    docker:
      - image: circleci/openjdk:14-jdk-buster-browsers
    working_directory: ~/app
  validator-integration:
    docker:
      - image: circleci/openjdk:14-jdk-buster-browsers
      - image: localstack/localstack:latest
        environment:
          - SERVICES=sqs,sns
          - DEBUG=${DEBUG- }
          - DATA_DIR=/tmp/localstack/data
          - DOCKER_HOST=unix:///var/run/docker.sock
          - AWS_EXECUTION_ENV=True
          - DEFAULT_REGION=eu-west-2
          - TMPDIR=/private
    environment:
      _JAVA_OPTIONS: -Xmx256m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false
    working_directory: ~/app

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  kubernetes: circleci/kubernetes@0.3.0
  helm: circleci/helm@1.1.2
  snyk: snyk/snyk@0.0.10
  dps: ministryofjustice/dps@1.2.1
  hmpps: ministryofjustice/hmpps@2.3

jobs:
  build:
    executor: builder
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle" }}
            - gradle-
      - run: ./gradlew build
      - run:
          name: Record the Application Version
          command: |
            jar xvf build/libs/court-case-matcher-*.jar BOOT-INF/classes/META-INF/build-info.properties
            APP_VERSION=$(grep 'build.version=' BOOT-INF/classes/META-INF/build-info.properties | awk -F= '{print $2}')
            rm BOOT-INF/classes/META-INF/build-info.properties
            # make up a good version name
            SHORT_HASH=$(git rev-parse --short HEAD)
            TAG=${APP_VERSION}.${SHORT_HASH}
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              TAG=${APP_VERSION}
            fi
            echo $TAG > ./app_version.txt
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
      - persist_to_workspace:
          root: .
          paths:
            - build/libs
            - build.gradle
            - app_version.txt

  test-integration:
    executor: validator-integration
    steps:
      - checkout
      - hmpps/install_aws_cli
      - run:
          name: Wait for SQS to be ready
          command: curl -4 --connect-timeout 30 --retry-connrefused --retry 20 --retry-delay 5 http://localhost:4566
      - run:
          name: Set up queues
          command: bash src/test/resources/localstack/setup-sqs.sh
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle" }}
            - gradle-
      - run:
          environment:
            AWS_PROVIDER: localstack
            SPRING_PROFILES_ACTIVE: test-msg
          command: ./gradlew integrationTest
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests

  pact-publish:
    executor: builder
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle" }}
            - gradle-
      - run: PACTCONSUMER_VERSION=main ./gradlew -Dpact.writer.overwrite=true test pactPublish

  build_docker:
    executor: deployer
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build container and publish to docker hub
          command: |
            APP_VERSION=$(cat ./app_version.txt)
            docker build --rm=false . \
               --tag "mojdigitalstudio/court-case-matcher:$APP_VERSION" \
               --label "maintainer=info@digital.justice.gov.uk" \
               --label "app.version=$APP_VERSION" \
               --label "build.version=$APP_VERSION" \
               --label "build.number=$CIRCLE_BUILD_NUM" \
               --label "build.url=$CIRCLE_BUILD_URL" \
               --label "build.gitref=$CIRCLE_SHA1"
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              # publish to docker hub as the tag
             docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
             docker tag mojdigitalstudio/court-case-matcher:$APP_VERSION mojdigitalstudio/court-case-matcher:latest
             docker push mojdigitalstudio/court-case-matcher:$APP_VERSION
             docker push mojdigitalstudio/court-case-matcher:latest
            fi

  app-scan:
    executor: builder
    steps:
      - checkout
      - snyk/scan:
          fail-on-issues: false
          monitor-on-build: true
          project: '${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}'
          organization: 'digital-probation-services'

  image-scan:
    executor: deployer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - snyk/scan:
          docker-image-name: 'mojdigitalstudio/court-case-matcher:latest'
          target-file: 'Dockerfile'
          fail-on-issues: false
          monitor-on-build: true
          project: '${CIRCLE_PROJECT_REPONAME}/latest'
          organization: 'digital-probation-services'

  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "dev"
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "preprod"
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "prod"

workflows:
  version: 2
  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - app-scan
      - image-scan

  test-integration:
    jobs:
      - test-integration

  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - build_docker:
          requires:
            - build
      - pact-publish:
          requires:
            - build
          filters:
            branches:
              only: main
      - dps/helm_lint:
          name: helm_lint_dev
          env: dev
          chart_name: court-case-matcher
      - deploy_dev:
          requires:
            - build_docker
          filters:
            branches:
              only: main
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context: court-probation-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context: court-probation-prod
          requires:
            - request-prod-approval
