import java.time.Instant
import java.time.LocalDate

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id "au.com.dius.pact" version "4.3.2"
    id 'info.solidsoft.pitest' version '1.7.0'
}

repositories {
    mavenCentral()
}

apply plugin: 'idea'
apply plugin: 'info.solidsoft.pitest'

pitest {
    //adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
    junit5PluginVersion = '0.12'
    // ...
}
project.sourceCompatibility = JavaVersion.VERSION_15
project.targetCompatibility = JavaVersion.VERSION_15

group = 'uk.gov.justice.probation'

def today = Instant.now()
def todaysDate = LocalDate.now().format('yyyy-MM-dd')
version = System.getenv('CI') ? "${todaysDate}.${System.getenv('CIRCLE_BUILD_NUM')}" : todaysDate

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    agentDeps.transitive = false
}

configurations.all {
    resolutionStrategy.eachDependency {
        DependencyResolveDetails details ->
            if (details.requested.group == 'org.codehaus.groovy') {
                details.useVersion "3.0.2"
                details.because "needed by rest-assured>=4.3"
            }
    }
}

bootJar {
    manifest = jar.manifest
}

jar {
    enabled = false // we use the boot JAR. Including this after Spring boot 2.5.0 caused issues
    manifest {
        attributes(
                'Implementation-Title': rootProject.name, 'Implementation-Version': version
        )
    }
}

springBoot {
    buildInfo {
        properties {
            artifact = rootProject.name
            version = version
            group = group
            name = rootProject.name
            time = today
            additional = [
                    by                   : System.properties['user.name'],
                    operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
                    continuousIntegration: System.getenv('CI') ? true : false,
                    machine              : InetAddress.localHost.hostName
            ]
        }
    }
}

ext {
    restAssuredVersion = '4.4.0'
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.0'
    implementation 'com.amazonaws:amazon-sqs-java-messaging-lib:1.0.8'
    implementation 'org.springframework.cloud:spring-cloud-aws-messaging:2.2.6.RELEASE'
    implementation 'org.projectlombok:lombok:1.18.22'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.projectreactor:reactor-spring:1.0.1.RELEASE'

    implementation 'com.microsoft.azure:applicationinsights-spring-boot-starter:2.6.4'
    implementation group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: '2.6.3'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-client'

    testImplementation(platform("org.junit:junit-bom:5.8.2"))
    testRuntimeOnly("org.junit.jupiter:junit-jupiter")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
        because 'allows tests to run from IDEs that bundle older version of launcher'
    }

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'io.projectreactor:reactor-test'

    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.28.0'
    testImplementation 'org.assertj:assertj-core:3.21.0'

    testImplementation 'org.awaitility:awaitility:4.1.1'

    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    testImplementation "io.rest-assured:json-path:$restAssuredVersion"
    testImplementation "io.rest-assured:xml-path:$restAssuredVersion"
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.32.0"
    testImplementation 'org.mockito:mockito-core:4.1.0'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation("com.github.tomakehurst:wiremock:2.27.2")

    testImplementation 'au.com.dius.pact.consumer:junit5:4.3.2'
    testImplementation 'org.apache.httpcomponents:fluent-hc:4.5.13'

    agentDeps 'com.microsoft.azure:applicationinsights-agent:3.2.4'
}

test {
    useJUnitPlatform()
    testLogging {
        events "started", "passed", "skipped", "failed", "standardError"
        exceptionFormat "short"
        showStackTraces = true
        showExceptions = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
    filter{
        excludeTestsMatching "*IntTest*"
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform ()

    testLogging {
        events "started", "passed", "skipped", "failed", "standardError"
        exceptionFormat "short"
        showStackTraces = true
        showExceptions = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

    filter {
        includeTestsMatching '*IntTest*'
        excludeTestsMatching '*WIP*'
    }
}

task copyAgent(type: Copy) {
    from configurations.agentDeps
    into "$buildDir/libs"
}

task copyAgentConfig(type: Copy) {
    from "applicationinsights.json"
    into "$buildDir/libs"
}

pact {
    publish {
        pactBrokerUrl = System.getenv("PACTBROKER_URL")
        pactBrokerUsername = System.getenv("PACTBROKER_AUTH_USERNAME")
        pactBrokerPassword = System.getenv("PACTBROKER_AUTH_PASSWORD")
        pactDirectory = 'build/pacts'
        consumerVersion = System.getenv("PACTCONSUMER_VERSION")
        tags  = (System.getenv("PACTCONSUMER_TAGS") ?: "main").split(",")
    }
}

assemble.dependsOn copyAgent
assemble.dependsOn copyAgentConfig
